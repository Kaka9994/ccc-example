{
  "ver": "1.0.27",
  "uuid": "a9e65492-1e7a-4214-92bd-c87fc41a827c",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D imageTexture;\nuniform vec2 trimRatio;\nuniform vec2 centerPoint;\nuniform vec2 rectSize;\nuniform float nodeRatio;\nuniform float circleR;\nuniform float maskType;\nuniform float imageRatio;\nvoid doRect (inout vec4 o) {\n  float haflw = rectSize.x / 2.0 * trimRatio.x;\n  float haflh = rectSize.y / 2.0 * trimRatio.y;\n  if (abs(v_uv0.x - centerPoint.x) > haflw ||\n      abs(v_uv0.y - centerPoint.y) > haflh) {\n    o.a = 0.0;\n  }\n}\nvoid doCircle (inout vec4 o) {\n  vec2 imgUV = vec2(v_uv0);\n  imgUV.x = (imgUV.x / trimRatio.x) - (0.5 / trimRatio.x - 0.5);\n  imgUV.y = (imgUV.y / trimRatio.y) - (0.5 / trimRatio.y - 0.5);\n  if (nodeRatio > 1.0) {\n    imgUV.x *= nodeRatio;\n    float dx = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.x -= dx;\n  } else {\n    imgUV.y /= nodeRatio;\n    float dy = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.y += dy;\n  }\n  if (length(imgUV - centerPoint) > circleR) {\n    o.a = 0.0;\n  }\n}\nvoid doImageStencil (inout vec4 o) {\n  vec2 imgUV = vec2(v_uv0);\n  imgUV.x = (imgUV.x / trimRatio.x) - (0.5 / trimRatio.x - 0.5);\n  imgUV.y = (imgUV.y / trimRatio.y) - (0.5 / trimRatio.y - 0.5);\n  if (nodeRatio > 1.0) {\n    imgUV.x *= nodeRatio;\n    float dx = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.x -= dx;\n  } else {\n    imgUV.y /= nodeRatio;\n    float dy = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.y += dy;\n  }\n  if (imageRatio > 1.0) {\n    imgUV.x /= imageRatio;\n    float dx = 0.5 * (imageRatio - 1.0) * (1.0 / imageRatio);\n    imgUV.x += dx;\n  } else {\n    imgUV.y *= imageRatio;\n    float dy = 0.5 * (imageRatio - 1.0) * (1.0 / imageRatio);\n    imgUV.y -= dy;\n  }\n  float ratio = 1.0;\n  if (imageRatio > 1.0) {\n    ratio = nodeRatio;\n  }\n  imgUV.x /= ratio;\n  float dxx = 0.5 * (ratio - 1.0) * (1.0 / ratio);\n  imgUV.x += dxx;\n  imgUV.y /= ratio;\n  float dyy = 0.5 * (ratio - 1.0) * (1.0 / ratio);\n  imgUV.y += dyy;\n  if (imgUV.x > 1.0 || imgUV.x < 0.0 ||\n      imgUV.y > 1.0 || imgUV.y < 0.0) {\n    o.a = 0.0;\n  } else {\n    o.a *= texture2D(imageTexture, imgUV).a;\n  }\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n  if (maskType == 0.0) {\n    doRect(o);\n  }\n  else if (maskType == 1.0) {\n    doCircle(o);\n  }\n  else {\n    doImageStencil(o);\n  }\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D imageTexture;\nuniform maskProps {\n  vec2 trimRatio;\n  vec2 centerPoint;\n  vec2 rectSize;\n  float nodeRatio;\n  float circleR;\n  float maskType;\n  float imageRatio;\n};\nvoid doRect (inout vec4 o) {\n  float haflw = rectSize.x / 2.0 * trimRatio.x;\n  float haflh = rectSize.y / 2.0 * trimRatio.y;\n  if (abs(v_uv0.x - centerPoint.x) > haflw ||\n      abs(v_uv0.y - centerPoint.y) > haflh) {\n    o.a = 0.0;\n  }\n}\nvoid doCircle (inout vec4 o) {\n  vec2 imgUV = vec2(v_uv0);\n  imgUV.x = (imgUV.x / trimRatio.x) - (0.5 / trimRatio.x - 0.5);\n  imgUV.y = (imgUV.y / trimRatio.y) - (0.5 / trimRatio.y - 0.5);\n  if (nodeRatio > 1.0) {\n    imgUV.x *= nodeRatio;\n    float dx = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.x -= dx;\n  } else {\n    imgUV.y /= nodeRatio;\n    float dy = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.y += dy;\n  }\n  if (length(imgUV - centerPoint) > circleR) {\n    o.a = 0.0;\n  }\n}\nvoid doImageStencil (inout vec4 o) {\n  vec2 imgUV = vec2(v_uv0);\n  imgUV.x = (imgUV.x / trimRatio.x) - (0.5 / trimRatio.x - 0.5);\n  imgUV.y = (imgUV.y / trimRatio.y) - (0.5 / trimRatio.y - 0.5);\n  if (nodeRatio > 1.0) {\n    imgUV.x *= nodeRatio;\n    float dx = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.x -= dx;\n  } else {\n    imgUV.y /= nodeRatio;\n    float dy = 0.5 * (nodeRatio - 1.0) * (1.0 / nodeRatio);\n    imgUV.y += dy;\n  }\n  if (imageRatio > 1.0) {\n    imgUV.x /= imageRatio;\n    float dx = 0.5 * (imageRatio - 1.0) * (1.0 / imageRatio);\n    imgUV.x += dx;\n  } else {\n    imgUV.y *= imageRatio;\n    float dy = 0.5 * (imageRatio - 1.0) * (1.0 / imageRatio);\n    imgUV.y -= dy;\n  }\n  float ratio = 1.0;\n  if (imageRatio > 1.0) {\n    ratio = nodeRatio;\n  }\n  imgUV.x /= ratio;\n  float dxx = 0.5 * (ratio - 1.0) * (1.0 / ratio);\n  imgUV.x += dxx;\n  imgUV.y /= ratio;\n  float dyy = 0.5 * (ratio - 1.0) * (1.0 / ratio);\n  imgUV.y += dyy;\n  if (imgUV.x > 1.0 || imgUV.x < 0.0 ||\n      imgUV.y > 1.0 || imgUV.y < 0.0) {\n    o.a = 0.0;\n  } else {\n    o.a *= texture(imageTexture, imgUV).a;\n  }\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n  if (maskType == 0.0) {\n    doRect(o);\n  }\n  else if (maskType == 1.0) {\n    doCircle(o);\n  }\n  else {\n    doImageStencil(o);\n  }\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}