{
  "ver": "1.0.27",
  "uuid": "96405b2d-a94e-43f2-9abc-b25fe1a39e59",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 u_line_color;\nuniform float u_font_size;\nuniform float u_line_width;\nfloat getAlphaWithAngle(float angle) {\n  float line = u_line_width / u_font_size;\n  vec2 p = vec2(cos(degrees(angle)), sin(degrees(angle))) * line;\n  float a = texture2D(texture, v_uv0 + p).a;\n  return a;\n}\nint getIsStrokeWithAngle(float angle) {\n  int stroke = 0;\n  float a = getAlphaWithAngle(angle);\n  if (a >= 0.5) {\n    stroke = 1;\n  }\n  return stroke;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n  if (o.a < 0.5) {\n    int strokeCount = 0;\n    for (int i = 0; i < 12; i++) {\n      strokeCount += getIsStrokeWithAngle(float(i) * 30.0);\n    }\n    if (strokeCount > 0) {\n      o = vec4(u_line_color.rgb, 1.0);\n    }\n  }\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform maskProps {\n  vec4 u_line_color;\n  float u_font_size;\n  float u_line_width;\n};\nfloat getAlphaWithAngle(float angle) {\n  float line = u_line_width / u_font_size;\n  vec2 p = vec2(cos(degrees(angle)), sin(degrees(angle))) * line;\n  float a = texture(texture, v_uv0 + p).a;\n  return a;\n}\nint getIsStrokeWithAngle(float angle) {\n  int stroke = 0;\n  float a = getAlphaWithAngle(angle);\n  if (a >= 0.5) {\n    stroke = 1;\n  }\n  return stroke;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n  if (o.a < 0.5) {\n    int strokeCount = 0;\n    for (int i = 0; i < 12; i++) {\n      strokeCount += getIsStrokeWithAngle(float(i) * 30.0);\n    }\n    if (strokeCount > 0) {\n      o = vec4(u_line_color.rgb, 1.0);\n    }\n  }\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}